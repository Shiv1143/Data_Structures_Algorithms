
Question 13:
------------


Majority Element
----------------

Given an array nums of size n, return the majority element.

The majority element is the element that appears more than ⌊n / 2⌋ times. You may assume that the majority element always exists in the array.

 

Example 1:

Input: nums = [3,2,3]
Output: 3
Example 2:

Input: nums = [2,2,1,1,1,2,2]
Output: 2
 

Constraints:

n == nums.length
1 <= n <= 5 * 104
-109 <= nums[i] <= 109

-----------------------------------------------------------

Solution:

Approach 1:

class Solution:
    def majorityElement(self, nums: List[int]) -> int:
        cur = nums[0]
        last = 1
        if len(nums)==1:
            return nums[0]
        for i in range(1,len(nums)):
            if nums[i] == cur:
                last += 1
            else:
                last -= 1

            if last < 0:
                cur = nums[i]
                last = 1

        return cur

Approach 2:

class Solution:
    def majorityElement(self, nums: List[int]) -> int:
        dic = {}
        if len(nums)==1:
            return nums[0]
        for i in range(len(nums)):
            if nums[i] in dic:
                dic[nums[i]] += 1
                if dic[nums[i]] > len(nums)//2:
                    return nums[i]
            else:
                dic[nums[i]] = 1

-------------------------------------------------------------------------
