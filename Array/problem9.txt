
Question 9:
-----------

** Single Number **
-------------------

Given a non-empty array of integers nums, every element appears twice except for one. Find that single one.

You must implement a solution with a linear runtime complexity and use only constant extra space.

 

Example 1:

Input: nums = [2,2,1]
Output: 1
Example 2:

Input: nums = [4,1,2,1,2]
Output: 4
Example 3:

Input: nums = [1]
Output: 1
 

Constraints:

1 <= nums.length <= 3 * 104
-3 * 104 <= nums[i] <= 3 * 104
Each element in the array appears twice except for one element which appears only once.

--------------------------------------------------------------------------------
Solution:

1st Approach:

class Solution:
    def singleNumber(self, nums: List[int]) -> int:
        print(nums)
        store = {}
        for i in range(len(nums)):
            if nums[i] in store:
                store[nums[i]] += 1
            else:
                store[nums[i]] = 0
        for index, key in enumerate(store):
            if store[key] == 0:
                return key

---------------------------------------------

2nd Approach:

class Solution:
    def singleNumber(self, nums: List[int]) -> int:
        xorr = 0
        for i in range(len(nums)):
            xorr ^= nums[i]

        return xorr

--------------------------------------------------------------------------------
